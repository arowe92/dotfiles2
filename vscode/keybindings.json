// Place your key bindings in this file to override the defaultsauto[]
[

    // Line Moving 
    {
        "key": "ctrl+alt+l",
        "command": "editor.action.indentLines",
        "when": "editorTextFocus && !editorReadonly"
    },
    {
        "key": "ctrl+]",
        "command": "-editor.action.indentLines",
        "when": "editorTextFocus && !editorReadonly"
    },
    {
        "key": "ctrl+alt+h",
        "command": "editor.action.outdentLines",
        "when": "editorTextFocus && !editorReadonly"
    },
    {
        "key": "ctrl+[",
        "command": "-editor.action.outdentLines",
        "when": "editorTextFocus && !editorReadonly"
    },
    {
        "key": "ctrl+alt+k",
        "command": "editor.action.moveLinesUpAction",
        "when": "editorTextFocus && !editorReadonly"
    },
    {
        "key": "alt+up",
        "command": "-editor.action.moveLinesUpAction",
        "when": "editorTextFocus && !editorReadonly"
    },
    {
        "key": "ctrl+alt+j",
        "command": "editor.action.moveLinesDownAction",
        "when": "editorTextFocus && !editorReadonly"
    },
    {
        "key": "alt+down",
        "command": "-editor.action.moveLinesDownAction",
        "when": "editorTextFocus && !editorReadonly"
    },
    // Line Moving End

    // LSP Stuff
    {
        "key": "alt+h",
        "command": "editor.action.showHover",
        "when": "editorTextFocus"
    },
    {
        "key": "ctrl+k ctrl+i",
        "command": "-editor.action.showHover",
        "when": "editorTextFocus"
    },
    {
        "key": "alt+f12",
        "command": "-editor.action.peekDefinition",
        "when": "editorHasDefinitionProvider && editorTextFocus && !inReferenceSearchEditor && !isInEmbeddedEditor"
    },
    {
        "key": "f12",
        "command": "-editor.action.revealDefinition",
        "when": "editorHasDefinitionProvider && editorTextFocus && !isInEmbeddedEditor"
    },
    {
        "key": "ctrl+g ctrl+d",
        "command": "editor.action.revealDefinitionAside",
        "when": "editorHasDefinitionProvider && editorTextFocus && !isInEmbeddedEditor"
    },
    {
        "key": "ctrl+k f12",
        "command": "-editor.action.revealDefinitionAside",
        "when": "editorHasDefinitionProvider && editorTextFocus && !isInEmbeddedEditor"
    },
    // Lsp Stuf End

    {
        "key": "alt+d",
        "command": "editor.action.addSelectionToNextFindMatch",
        "when": "editorTextFocus && neovim.mode == 'insert'"
    },
    {
        "key": "ctrl+d",
        "command": "-editor.action.addSelectionToNextFindMatch",
        "when": "editorFocus"
    },
    {
        "key": "ctrl+x ctrl+l",
        "command": "workbench.action.splitEditorRight",
        "when": "neovim.mode != 'insert'"
    },
    {
        "key": "ctrl+x ctrl+j",
        "command": "workbench.action.splitEditorDown",
        "when": "neovim.mode != 'insert'"
    },
    {
        "key": "ctrl+x ctrl+h",
        "command": "workbench.action.splitEditorLeft",
        "when": "neovim.mode != 'insert'"
    },
    {
        "key": "ctrl+x ctrl+k",
        "command": "workbench.action.splitEditorUp",
        "when": "neovim.mode != 'insert'"
    },
    {
        "key": "ctrl+q",
        "command": "workbench.action.closeEditorsInGroup",
        "when": "editorTextFocus && neovim.ctrlKeysNormal && neovim.init && neovim.mode != 'insert'"
    },
    {
        "key": "ctrl+/",
        "command": "-editor.action.commentLine",
        "when": "editorTextFocus && !editorReadonly"
    },
    {
        "key": "ctrl+k ctrl+right",
        "command": "-workbench.action.focusRightGroup"
    },
    {
        "key": "right",
        "command": "workbench.action.nextEditor",
        "when": "editorFocus && neovim.mode != 'insert'"
    },
    {
        "key": "left",
        "command": "workbench.action.previousEditor",
        "when": "editorFocus && neovim.mode != 'insert'"
    },
    {
        "key": "ctrl+shift+k",
        "command": "workbench.action.focusAboveGroup"
    },
    {
        "key": "ctrl+shift+j",
        "command": "workbench.action.focusBelowGroup"
    },
    {
        "key": "ctrl+shift+l",
        "command": "workbench.action.focusRightGroup"
    },
    {
        "key": "ctrl+shift+h",
        "command": "workbench.action.focusLeftGroup"
    },
    {
        "key": "ctrl+shift+u",
        "command": "workbench.action.nextEditor"
    },
    {
        "key": "ctrl+shift+y",
        "command": "workbench.action.previousEditor"
    },
    {
        "key": "ctrl+shift+h",
        "command": "workbench.action.focusLeftGroup"
    },
    {
        "key": "ctrl+k ctrl+up",
        "command": "-workbench.action.focusAboveGroup"
    },
    {
        "key": "ctrl+x l",
        "command": "workbench.action.focusRightGroup"
    },
    {
        "key": "ctrl+h",
        "command": "workbench.action.focusLeftGroup",
        "when": "editorTextFocus && neovim.mode != 'insert'"
    },
    {
        "key": "ctrl+shift+w",
        "command": "workbench.action.closeActiveEditor",
        "when": "terminalEditorFocus"
    },
    {
        "key": "ctrl+k",
        "command": "workbench.action.focusAboveGroup",
        "when": "editorFocus && neovim.mode != 'insert'"
    },
    {
        "key": "ctrl+shift+n",
        "command": "workbench.action.focusNextGroup"
    },
    {
        "key": "ctrl+shift+\\",
        "command": "workbench.action.togglePanel"
    },
    {
        "key": "ctrl+b",
        "command": "-workbench.action.toggleSidebarVisibility"
    },
    {
        "key": "shift+alt+j",
        "args": "<S-A-j>",
        "command": "vscode-neovim.send",
        "when": "neovim.recording || editorTextFocus && neovim.init && neovim.mode != 'insert'"
    },
    {
        "key": "shift+alt+k",
        "args": "<S-A-k>",
        "command": "vscode-neovim.send",
        "when": "neovim.recording || editorTextFocus && neovim.init && neovim.mode != 'insert'"
    },
    {
        "key": "shift+alt+h",
        "args": "<S-A-h>",
        "command": "vscode-neovim.send",
        "when": "neovim.recording || editorTextFocus && neovim.init && neovim.mode != 'insert'"
    },
    {
        "key": "shift+alt+l",
        "args": "<S-A-l>",
        "command": "vscode-neovim.send",
        "when": "neovim.recording || editorTextFocus && neovim.init && neovim.mode != 'insert'"
    },
    {
        "key": "alt+/",
        "args": "<M-/>",
        "command": "vscode-neovim.send",
        "when": "editorTextFocus && neovim.init"
    },
    {
        "key": "ctrl+shift+f",
        "command": "search.action.openNewEditor"
    },
    {
        "key": "shift+alt+p",
        "command": "workbench.action.openRecent"
    },
    {
        "key": "ctrl+r",
        "command": "-workbench.action.openRecent"
    },
    {
        "key": "ctrl+h",
        "command": "workbench.files.action.focusFilesExplorer",
        "when": "editorFocus && activeEditorGroupIndex == 1"
    },
    {
        "key": "ctrl+l",
        "command": "workbench.action.focusFirstEditorGroup",
        "when": "filesExplorerFocus"
    },
    {
        "key": "ctrl+l",
        "command": "workbench.action.focusAuxiliaryBar",
        "when": "editorFocus &&  activeEditorGroupLast"
    },
    {
        "key": "ctrl+h",
        "command": "workbench.action.focusLastEditorGroup",
        "when": "auxiliaryBarFocus" 
    },
    {
        "key": "ctrl+shift+m",
        "command": "-workbench.actions.view.problems",
        "when": "workbench.panel.markers.view.active"
    },
    {
        "key": "ctrl+u",
        "command": "workbench.action.nextPanelView",
        "when": "panelFocus"
    },
    {
        "key": "ctrl+y",
        "command": "workbench.action.previousPanelView",
        "when": "panelFocus"
    },
    {
        "key": "ctrl+h",
        "command": "-editor.action.startFindReplaceAction",
        "when": "editorFocus || editorIsOpen"
    },
    {
        "key": "ctrl+j",
        "command": "outline.focus",
        "when": "filesExplorerFocus"
    },
    {
        "key": "alt+a",
        "command": "vscode-neovim.send",
        "when": "editorTextFocus && neovim.mode!='insert'",
        "args": ["<M-a>"]
    },
    {
        "key": "alt+enter",
        "command": "editor.action.triggerSuggest",
        "when": "editorHasCompletionItemProvider && textInputFocus && !editorReadonly"
    },
    {
        "key": "ctrl+space",
        "command": "-editor.action.triggerSuggest",
        "when": "editorHasCompletionItemProvider && textInputFocus && !editorReadonly"
    },
    {
        "key": "alt+p",
        "command": "workbench.action.showAllEditors"
    },
    {
        "key": "ctrl+k ctrl+p",
        "command": "-workbench.action.showAllEditors"
    },
    {
        "key": "ctrl+q",
        "command": "workbench.action.closeEditorsAndGroup"
    },
    {
        "key": "g",
        "args": "g",
        "command": "vscode-neovim.send",
        "when": "neovim.recording || editorTextFocus && neovim.init && neovim.mode != 'insert'"
    },
    {
        "key": "shift+\\",
        "args": "<S-\\>",
        "command": "vscode-neovim.send",
        "when": "neovim.recording || editorTextFocus && neovim.init && neovim.mode != 'insert'"
    },
    {
        "key": "space",
        "args": "<space>",
        "command": "vscode-neovim.send",
        "when": "neovim.recording || editorTextFocus && neovim.init && neovim.mode != 'insert'"
    },
    {
        "key": "\\",
        "args": "\\",
        "command": "vscode-neovim.send",
        "when": "neovim.recording || editorTextFocus && neovim.init && neovim.mode != 'insert'"
    },
    {
        "key": "=",
        "args": "=",
        "command": "vscode-neovim.send",
        "when": "neovim.recording || editorTextFocus && neovim.init && neovim.mode != 'insert'"
    },
    {
        "key": "v",
        "args": "v",
        "command": "vscode-neovim.send",
        "when": "neovim.recording || editorTextFocus && neovim.init && neovim.mode != 'insert'"
    },
    {
        "key": "p",
        "args": "p",
        "command": "vscode-neovim.send",
        "when": "neovim.recording || editorTextFocus && neovim.init && neovim.mode != 'insert'"
    },
    {
        "key": "ctrl+shift+m",
        "command": "terminal.focus"
    },
    {
        "key": "ctrl+shift+,",
        "command": "workbench.panel.output.focus"
    },
    {
        "key": "ctrl+shift+.",
        "command": "workbench.panel.markers.view.focus"
    },
    {
        "key": "ctrl+shift+=",
        "command": "workbench.action.increaseViewSize",
        "when": "!editorFocus"
    },
    {
        "key": "ctrl+shift+-",
        "command": "workbench.action.decreaseViewWidth",
        "when": "editorFocus"
    },
    {
        "key": "ctrl+shift+=",
        "command": "workbench.action.increaseViewWidth",
        "when": "editorFocus"
    },
    {
        "key": "ctrl+0",
        "command": "-workbench.action.focusSideBar"
    },
    {
        "key": "ctrl+j",
        "command": "-workbench.action.togglePanel"
    },
    {
        "key": "ctrl+j",
        "command": "workbench.action.focusBelowGroup"
    },
    {
        "key": "ctrl+shift+t",
        "command": "workbench.action.createTerminalEditor"
    },
    {
        "key": "ctrl+u",
        "command": "workbench.action.terminal.scrollUpPage",
        "when": "terminalFocus && terminalHasBeenCreated && !terminalAltBufferActive || terminalFocus && terminalProcessSupported && !terminalAltBufferActive"
    },
    {
        "key": "shift+pageup",
        "command": "-workbench.action.terminal.scrollUpPage",
        "when": "terminalFocus && terminalHasBeenCreated && !terminalAltBufferActive || terminalFocus && terminalProcessSupported && !terminalAltBufferActive"
    },
    {
        "key": "ctrl+d",
        "command": "workbench.action.terminal.scrollDownPage",
        "when": "terminalFocus && terminalHasBeenCreated && !terminalAltBufferActive || terminalFocus && terminalProcessSupported && !terminalAltBufferActive"
    },
    {
        "key": "ctrl+alt+enter",
        "command": "workbench.action.maximizeEditor"
    },
    {
        "key": "shift+f11",
        "command": "workbench.action.toggleZenMode"
    },
    {
        "key": "ctrl+k z",
        "command": "-workbench.action.toggleZenMode"
    },
    {
        "key": "ctrl+x shift+k",
        "command": "workbench.action.moveEditorToAboveGroup"
    },
    {
        "key": "ctrl+x shift+j",
        "command": "workbench.action.moveEditorToBelowGroup"
    },
    {
        "key": "ctrl+x shift+h",
        "command": "workbench.action.moveEditorToLeftGroup"
    },
    {
        "key": "ctrl+x shift+l",
        "command": "workbench.action.moveEditorToRightGroup"
    },
    {
        "key": "ctrl+x k",
        "command": "workbench.action.focusAboveGroup"
    },
    {
        "key": "ctrl+x j",
        "command": "workbench.action.focusBelowGroup"
    },
    {
        "key": "ctrl+x h",
        "command": "workbench.action.focusLeftGroup"
    },
    {
        "key": "ctrl+shift+-",
        "command": "workbench.action.decreaseViewSize",
        "when": "!editorFocus"
    },
    {
        "key": "ctrl+shift+alt+=",
        "command": "workbench.action.decreaseViewSize",
        "when": "auxiliaryBarFocus"
    },
    {
        "key": "ctrl+shift+alt+p",
        "command": "projectManager.listProjects"
    },
    {
        "key": "shift+alt+p",
        "command": "-projectManager.listProjects"
    },
    {
        "key": "ctrl+alt+p",
        "command": "workbench.action.openPreviousEditorFromHistory"
    },
    {
        "key": "ctrl+shift+r",
        "command": "workbench.action.tasks.test",
        "when": "taskCommandsRegistered"
    },
    {
        "key": "ctrl+w",
        "command": "-vscode-neovim.send-cmdline",
        "when": "neovim.mode == 'cmdline_insert' || neovim.mode == 'cmdline_normal' || neovim.mode == 'cmdline_replace'"
    },
    {
        "key": "ctrl+w",
        "command": "-vscode-neovim.send",
        "when": "editorTextFocus && neovim.ctrlKeysNormal && neovim.init && neovim.mode != 'insert'"
    },
    {
        "key": "ctrl+w",
        "command": "-vscode-neovim.send",
        "when": "editorTextFocus && neovim.ctrlKeysInsert && neovim.mode == 'insert'"
    },
    {
        "key": "ctrl+x e",
        "command": "workbench.action.terminal.moveToEditor",
        "when": "terminalFocus"
    },
    {
        "key": "ctrl+x e",
        "command": "workbench.action.terminal.moveToTerminalPanel",
        "when": "terminalEditorFocus"
    }
]