// Place your key bindings in this file to override the defaultsauto[]
[
    // Line Moving 
    {
        "key": "ctrl+alt+l",
        "command": "editor.action.indentLines",
        "when": "editorTextFocus && !editorReadonly"
    },
    {
        "key": "ctrl+]",
        "command": "-editor.action.indentLines",
        "when": "editorTextFocus && !editorReadonly"
    },
    {
        "key": "ctrl+alt+h",
        "command": "editor.action.outdentLines",
        "when": "editorTextFocus && !editorReadonly"
    },
    {
        "key": "ctrl+[",
        "command": "-editor.action.outdentLines",
        "when": "editorTextFocus && !editorReadonly"
    },
    {
        "key": "ctrl+alt+k",
        "command": "editor.action.moveLinesUpAction",
        "when": "editorTextFocus && !editorReadonly"
    },
    {
        "key": "alt+up",
        "command": "-editor.action.moveLinesUpAction",
        "when": "editorTextFocus && !editorReadonly"
    },
    {
        "key": "ctrl+alt+j",
        "command": "editor.action.moveLinesDownAction",
        "when": "editorTextFocus && !editorReadonly"
    },
    {
        "key": "alt+down",
        "command": "-editor.action.moveLinesDownAction",
        "when": "editorTextFocus && !editorReadonly"
    },
    // Line Moving End
    // LSP Stuff
    {
        "key": "alt+h",
        "command": "editor.action.showHover",
        "when": "editorTextFocus"
    },
    {
        "key": "ctrl+k ctrl+i",
        "command": "-editor.action.showHover",
        "when": "editorTextFocus"
    },
    {
        "key": "alt+f12",
        "command": "-editor.action.peekDefinition",
        "when": "editorHasDefinitionProvider && editorTextFocus && !inReferenceSearchEditor && !isInEmbeddedEditor"
    },
    {
        "key": "f12",
        "command": "-editor.action.revealDefinition",
        "when": "editorHasDefinitionProvider && editorTextFocus && !isInEmbeddedEditor"
    },
    {
        "key": "ctrl+g ctrl+d",
        "command": "editor.action.revealDefinitionAside",
        "when": "editorHasDefinitionProvider && editorTextFocus && !isInEmbeddedEditor"
    },
    {
        "key": "ctrl+k f12",
        "command": "-editor.action.revealDefinitionAside",
        "when": "editorHasDefinitionProvider && editorTextFocus && !isInEmbeddedEditor"
    },
    // Lsp Stuf End
    {
        "key": "alt+d",
        "command": "editor.action.addSelectionToNextFindMatch",
        "when": "editorTextFocus && neovim.mode == 'insert'"
    },
    {
        "key": "ctrl+d",
        "command": "-editor.action.addSelectionToNextFindMatch",
        "when": "editorFocus"
    },
    {
        "key": "ctrl+x ctrl+l",
        "command": "workbench.action.splitEditorRight",
        "when": "neovim.mode != 'insert'"
    },
    {
        "key": "ctrl+x ctrl+j",
        "command": "workbench.action.splitEditorDown",
        "when": "neovim.mode != 'insert'"
    },
    {
        "key": "ctrl+x ctrl+h",
        "command": "workbench.action.splitEditorLeft",
        "when": "neovim.mode != 'insert'"
    },
    {
        "key": "ctrl+x ctrl+k",
        "command": "workbench.action.splitEditorUp",
        "when": "neovim.mode != 'insert'"
    },
    {
        "key": "ctrl+q",
        "command": "workbench.action.closeEditorsInGroup",
        "when": "editorTextFocus && neovim.ctrlKeysNormal && neovim.init && neovim.mode != 'insert'"
    },
    {
        "key": "ctrl+/",
        "command": "-editor.action.commentLine",
        "when": "editorTextFocus && !editorReadonly"
    },
    {
        "key": "ctrl+k ctrl+right",
        "command": "-workbench.action.focusRightGroup"
    },
    {
        "key": "ctrl+a ]",
        "command": "workbench.action.nextEditor"
    },
    {
        "key": "left",
        "command": "workbench.action.previousEditor",
        "when": "editorFocus && neovim.mode != 'insert'"
    },
    {
        "key": "ctrl+shift+k",
        "command": "workbench.action.focusAboveGroup"
    },
    {
        "key": "ctrl+shift+j",
        "command": "workbench.action.focusBelowGroup"
    },
    {
        "key": "ctrl+shift+l",
        "command": "workbench.action.focusRightGroup"
    },
    {
        "key": "ctrl+shift+h",
        "command": "workbench.action.focusLeftGroup"
    },
    {
        "key": "ctrl+shift+y",
        "command": "workbench.action.previousEditor"
    },
    {
        "key": "ctrl+shift+h",
        "command": "workbench.action.focusLeftGroup"
    },
    {
        "key": "ctrl+k ctrl+up",
        "command": "-workbench.action.focusAboveGroup"
    },
    {
        "key": "ctrl+h",
        "command": "workbench.action.focusLeftGroup",
        "when": "editorTextFocus && neovim.mode != 'insert'"
    },
    {
        "key": "ctrl+shift+w",
        "command": "workbench.action.closeActiveEditor",
        "when": "terminalEditorFocus"
    },
    {
        "key": "ctrl+k",
        "command": "workbench.action.focusAboveGroup",
        "when": "editorFocus && neovim.mode != 'insert'"
    },
    {
        "key": "ctrl+shift+n",
        "command": "workbench.action.focusNextGroup"
    },
    {
        "key": "ctrl+shift+\\",
        "command": "workbench.action.togglePanel"
    },
    {
        "key": "ctrl+b",
        "command": "-workbench.action.toggleSidebarVisibility"
    },
    {
        "key": "shift+alt+j",
        "args": "<S-A-j>",
        "command": "vscode-neovim.send",
        "when": "neovim.recording || editorTextFocus && neovim.init && neovim.mode != 'insert'"
    },
    {
        "key": "shift+alt+k",
        "args": "<S-A-k>",
        "command": "vscode-neovim.send",
        "when": "neovim.recording || editorTextFocus && neovim.init && neovim.mode != 'insert'"
    },
    {
        "key": "shift+alt+h",
        "args": "<S-A-h>",
        "command": "vscode-neovim.send",
        "when": "neovim.recording || editorTextFocus && neovim.init && neovim.mode != 'insert'"
    },
    {
        "key": "shift+alt+l",
        "args": "<S-A-l>",
        "command": "vscode-neovim.send",
        "when": "neovim.recording || editorTextFocus && neovim.init && neovim.mode != 'insert'"
    },
    {
        "key": "alt+/",
        "args": "<M-/>",
        "command": "vscode-neovim.send",
        "when": "editorTextFocus && neovim.init"
    },
    {
        "key": "ctrl+shift+f",
        "command": "search.action.openNewEditor"
    },
    {
        "key": "shift+alt+p",
        "command": "workbench.action.openRecent"
    },
    {
        "key": "ctrl+r",
        "command": "-workbench.action.openRecent"
    },
    {
        "key": "ctrl+a h",
        "command": "workbench.action.focusSideBar"
    },
    {
        "key": "ctrl+l",
        "command": "workbench.action.focusFirstEditorGroup",
        "when": "sideBarFocus"
    },
    {
        "key": "ctrl+a l",
        "command": "workbench.action.focusAuxiliaryBar"
    },
    {
        "key": "ctrl+h",
        "command": "workbench.action.focusLastEditorGroup",
        "when": "auxiliaryBarFocus"
    },
    {
        "key": "ctrl+shift+m",
        "command": "-workbench.actions.view.problems",
        "when": "workbench.panel.markers.view.active"
    },
    {
        "key": "ctrl+u",
        "command": "workbench.action.nextPanelView",
        "when": "panelFocus"
    },
    {
        "key": "ctrl+y",
        "command": "workbench.action.previousPanelView",
        "when": "panelFocus"
    },
    {
        "key": "ctrl+h",
        "command": "-editor.action.startFindReplaceAction",
        "when": "editorFocus || editorIsOpen"
    },
    {
        "key": "ctrl+a u",
        "command": "outline.focus"
    },
    {
        "key": "alt+a",
        "command": "vscode-neovim.send",
        "when": "editorTextFocus && neovim.mode!='insert'",
        "args": [
            "<M-a>"
        ]
    },
    {
        "key": "alt+enter",
        "command": "editor.action.triggerSuggest",
        "when": "editorHasCompletionItemProvider && textInputFocus && !editorReadonly"
    },
    {
        "key": "ctrl+space",
        "command": "-editor.action.triggerSuggest",
        "when": "editorHasCompletionItemProvider && textInputFocus && !editorReadonly"
    },
    {
        "key": "alt+p",
        "command": "workbench.action.showAllEditors"
    },
    {
        "key": "ctrl+k ctrl+p",
        "command": "-workbench.action.showAllEditors"
    },
    {
        "key": "ctrl+q",
        "command": "workbench.action.closeEditorsAndGroup"
    },
    {
        "key": "g",
        "args": "g",
        "command": "vscode-neovim.send",
        "when": "neovim.recording || editorTextFocus && neovim.init && neovim.mode != 'insert'"
    },
    {
        "key": "shift+\\",
        "args": "<S-\\>",
        "command": "vscode-neovim.send",
        "when": "neovim.recording || editorTextFocus && neovim.init && neovim.mode != 'insert'"
    },
    {
        "key": "space",
        "args": "<space>",
        "command": "vscode-neovim.send",
        "when": "neovim.recording || editorTextFocus && neovim.init && neovim.mode != 'insert'"
    },
    {
        "key": "\\",
        "args": "\\",
        "command": "vscode-neovim.send",
        "when": "neovim.recording || editorTextFocus && neovim.init && neovim.mode != 'insert'"
    },
    {
        "key": "=",
        "args": "=",
        "command": "vscode-neovim.send",
        "when": "neovim.recording || editorTextFocus && neovim.init && neovim.mode != 'insert'"
    },
    {
        "key": "v",
        "args": "v",
        "command": "vscode-neovim.send",
        "when": "neovim.recording || editorTextFocus && neovim.init && neovim.mode != 'insert'"
    },
    {
        "key": "p",
        "args": "p",
        "command": "vscode-neovim.send",
        "when": "neovim.recording || editorTextFocus && neovim.init && neovim.mode != 'insert'"
    },
    {
        "key": "ctrl+shift+m",
        "command": "terminal.focus"
    },
    {
        "key": "ctrl+shift+,",
        "command": "workbench.panel.output.focus"
    },
    {
        "key": "ctrl+shift+.",
        "command": "workbench.panel.markers.view.focus"
    },
    {
        "key": "ctrl+shift+=",
        "command": "workbench.action.increaseViewSize",
        "when": "!editorFocus"
    },
    {
        "key": "ctrl+shift+-",
        "command": "workbench.action.decreaseViewWidth",
        "when": "editorFocus"
    },
    {
        "key": "ctrl+shift+=",
        "command": "workbench.action.increaseViewWidth",
        "when": "editorFocus"
    },
    {
        "key": "ctrl+0",
        "command": "-workbench.action.focusSideBar"
    },
    {
        "key": "ctrl+j",
        "command": "-workbench.action.togglePanel"
    },
    {
        "key": "ctrl+j",
        "command": "workbench.action.focusBelowGroup"
    },
    {
        "key": "ctrl+shift+t",
        "command": "workbench.action.createTerminalEditor"
    },
    {
        "key": "ctrl+u",
        "command": "workbench.action.terminal.scrollUpPage",
        "when": "terminalFocus && terminalHasBeenCreated && !terminalAltBufferActive || terminalFocus && terminalProcessSupported && !terminalAltBufferActive"
    },
    {
        "key": "shift+pageup",
        "command": "-workbench.action.terminal.scrollUpPage",
        "when": "terminalFocus && terminalHasBeenCreated && !terminalAltBufferActive || terminalFocus && terminalProcessSupported && !terminalAltBufferActive"
    },
    {
        "key": "ctrl+d",
        "command": "workbench.action.terminal.scrollDownPage",
        "when": "terminalFocus && terminalHasBeenCreated && !terminalAltBufferActive || terminalFocus && terminalProcessSupported && !terminalAltBufferActive"
    },
    {
        "key": "ctrl+alt+enter",
        "command": "workbench.action.maximizeEditor"
    },
    {
        "key": "shift+f11",
        "command": "workbench.action.toggleZenMode"
    },
    {
        "key": "ctrl+k z",
        "command": "-workbench.action.toggleZenMode"
    },
    {
        "key": "ctrl+x shift+k",
        "command": "workbench.action.moveEditorToAboveGroup"
    },
    {
        "key": "ctrl+x shift+j",
        "command": "workbench.action.moveEditorToBelowGroup"
    },
    {
        "key": "ctrl+x shift+h",
        "command": "workbench.action.moveEditorToLeftGroup"
    },
    {
        "key": "ctrl+x shift+l",
        "command": "workbench.action.moveEditorToRightGroup"
    },
    {
        "key": "ctrl+x k",
        "command": "workbench.action.focusAboveGroup"
    },
    {
        "key": "ctrl+x j",
        "command": "workbench.action.focusBelowGroup"
    },
    {
        "key": "ctrl+x h",
        "command": "workbench.action.focusLeftGroup"
    },
    {
        "key": "ctrl+shift+-",
        "command": "workbench.action.decreaseViewSize",
        "when": "!editorFocus"
    },
    {
        "key": "ctrl+shift+alt+=",
        "command": "workbench.action.decreaseViewSize",
        "when": "auxiliaryBarFocus"
    },
    {
        "key": "ctrl+shift+alt+p",
        "command": "projectManager.listProjects"
    },
    {
        "key": "shift+alt+p",
        "command": "-projectManager.listProjects"
    },
    {
        "key": "ctrl+alt+p",
        "command": "workbench.action.openPreviousEditorFromHistory"
    },
    {
        "key": "ctrl+shift+r",
        "command": "workbench.action.tasks.test",
        "when": "taskCommandsRegistered"
    },
    {
        "key": "ctrl+w",
        "command": "-vscode-neovim.send-cmdline",
        "when": "neovim.mode == 'cmdline_insert' || neovim.mode == 'cmdline_normal' || neovim.mode == 'cmdline_replace'"
    },
    {
        "key": "ctrl+w",
        "command": "-vscode-neovim.send",
        "when": "editorTextFocus && neovim.ctrlKeysNormal && neovim.init && neovim.mode != 'insert'"
    },
    {
        "key": "ctrl+w",
        "command": "-vscode-neovim.send",
        "when": "editorTextFocus && neovim.ctrlKeysInsert && neovim.mode == 'insert'"
    },
    {
        "key": "ctrl+x e",
        "command": "workbench.action.terminal.moveToEditor",
        "when": "terminalFocus"
    },
    {
        "key": "ctrl+x e",
        "command": "workbench.action.terminal.moveToTerminalPanel",
        "when": "terminalEditorFocus"
    },
    {
        "key": "ctrl+]",
        "command": "search.action.focusNextSearchResult",
        "when": "inSearchEditor || searchInputBoxFocus"
    },
    {
        "key": "f4",
        "command": "-search.action.focusNextSearchResult",
        "when": "hasSearchResult || inSearchEditor"
    },
    {
        "key": "ctrl+[",
        "command": "search.action.focusPreviousSearchResult",
        "when": "inSearchEditor || searchInputBoxFocus"
    },
    {
        "key": "shift+f4",
        "command": "-search.action.focusPreviousSearchResult",
        "when": "hasSearchResult || inSearchEditor"
    },
    {
        "key": "ctrl+f",
        "command": "search.action.focusQueryEditorWidget",
        "when": "inSearchEditor"
    },
    {
        "key": "ctrl+u",
        "command": "vscode-neovim.send",
        "args": "28k",
        "when": "editorTextFocus && neovim.ctrlKeysNormal && neovim.init && neovim.mode != 'insert'"
    },
    {
        "key": "ctrl+d",
        "command": "vscode-neovim.send",
        "args": "28j",
        "when": "editorTextFocus && neovim.ctrlKeysNormal && neovim.init && neovim.mode != 'insert'"
    },

    {
        "key": "ctrl+k",
        "command": "workbench.action.terminal.sendSequence",
        "when": "terminalFocus"
    },
    
    // Remove All ctrl+k Hotkeys
    {
        "key": "ctrl+k s",
        "command": "-saveAll"
    },
    {
        "key": "ctrl+k ctrl+w",
        "command": "-workbench.action.closeAllEditors"
    },
    {
        "key": "ctrl+k ctrl+shift+w",
        "command": "-workbench.action.closeAllGroups"
    },
    {
        "key": "ctrl+k w",
        "command": "-workbench.action.closeEditorsInGroup"
    },
    {
        "key": "ctrl+k u",
        "command": "-workbench.action.closeUnmodifiedEditors"
    },
    {
        "key": "ctrl+k p",
        "command": "-workbench.action.files.copyPathOfActiveFile"
    },
    {
        "key": "ctrl+k r",
        "command": "-workbench.action.files.revealActiveFileInWindows"
    },
    {
        "key": "ctrl+k ctrl+shift+s",
        "command": "-workbench.action.files.saveWithoutFormatting"
    },
    {
        "key": "ctrl+k ctrl+down",
        "command": "-workbench.action.focusBelowGroup"
    },
    {
        "key": "ctrl+k ctrl+left",
        "command": "-workbench.action.focusLeftGroup"
    },
    {
        "key": "ctrl+k enter",
        "command": "-workbench.action.keepEditor"
    },
    {
        "key": "ctrl+k ctrl+r",
        "command": "-workbench.action.keybindingsReference"
    },
    {
        "key": "ctrl+k down",
        "command": "-workbench.action.moveActiveEditorGroupDown"
    },
    {
        "key": "ctrl+k left",
        "command": "-workbench.action.moveActiveEditorGroupLeft"
    },
    {
        "key": "ctrl+k right",
        "command": "-workbench.action.moveActiveEditorGroupRight"
    },
    {
        "key": "ctrl+k up",
        "command": "-workbench.action.moveActiveEditorGroupUp"
    },
    {
        "key": "ctrl+k ctrl+q",
        "command": "-workbench.action.navigateToLastEditLocation"
    },
    {
        "key": "ctrl+k ctrl+pagedown",
        "command": "-workbench.action.nextEditorInGroup"
    },
    {
        "key": "ctrl+k ctrl+s",
        "command": "-workbench.action.openGlobalKeybindings"
    },
    {
        "key": "ctrl+k ctrl+pageup",
        "command": "-workbench.action.previousEditorInGroup"
    },
    {
        "key": "ctrl+k ctrl+t",
        "command": "-workbench.action.selectTheme"
    },
    {
        "key": "ctrl+k ctrl+\\",
        "command": "-workbench.action.splitEditorOrthogonal"
    },
    {
        "key": "ctrl+k c",
        "command": "-workbench.files.action.compareWithClipboard"
    },
    {
        "key": "ctrl+k d",
        "command": "-workbench.files.action.compareWithSaved"
    },
    {
        "key": "ctrl+k ctrl+shift+c",
        "command": "-copyRelativeFilePath",
        "when": "!editorFocus"
    },
    {
        "key": "ctrl+k m",
        "command": "-workbench.action.editor.changeLanguageMode",
        "when": "!notebookEditorFocused"
    },
    {
        "key": "ctrl+k ctrl+c",
        "command": "-editor.action.addCommentLine",
        "when": "editorTextFocus && !editorReadonly"
    },
    {
        "key": "ctrl+k ctrl+k",
        "command": "-editor.action.defineKeybinding",
        "when": "editorTextFocus && !editorReadonly && editorLangId == 'jsonc'"
    },
    {
        "key": "ctrl+shift+k",
        "command": "-editor.action.deleteLines",
        "when": "textInputFocus && !editorReadonly"
    },
    {
        "key": "ctrl+k ctrl+f",
        "command": "-editor.action.formatSelection",
        "when": "editorHasDocumentSelectionFormattingProvider && editorTextFocus && !editorReadonly"
    },
    {
        "key": "ctrl+k ctrl+d",
        "command": "-editor.action.moveSelectionToNextFindMatch",
        "when": "editorFocus"
    },
    {
        "key": "ctrl+k ctrl+u",
        "command": "-editor.action.removeCommentLine",
        "when": "editorTextFocus && !editorReadonly"
    },
    {
        "key": "ctrl+k ctrl+k",
        "command": "-editor.action.selectFromAnchorToCursor",
        "when": "editorTextFocus && selectionAnchorSet"
    },
    {
        "key": "ctrl+k ctrl+b",
        "command": "-editor.action.setSelectionAnchor",
        "when": "editorTextFocus"
    },
    {
        "key": "ctrl+k ctrl+x",
        "command": "-editor.action.trimTrailingWhitespace",
        "when": "editorTextFocus && !editorReadonly"
    },
    {
        "key": "ctrl+k ctrl+,",
        "command": "-editor.createFoldingRangeFromSelection",
        "when": "editorTextFocus && foldingEnabled"
    },
    {
        "key": "ctrl+k ctrl+i",
        "command": "-editor.debug.action.showDebugHover",
        "when": "editorTextFocus && inDebugMode"
    },
    {
        "key": "ctrl+k ctrl+0",
        "command": "-editor.foldAll",
        "when": "editorTextFocus && foldingEnabled"
    },
    {
        "key": "ctrl+k ctrl+/",
        "command": "-editor.foldAllBlockComments",
        "when": "editorTextFocus && foldingEnabled"
    },
    {
        "key": "ctrl+k ctrl+-",
        "command": "-editor.foldAllExcept",
        "when": "editorTextFocus && foldingEnabled"
    },
    {
        "key": "ctrl+k ctrl+8",
        "command": "-editor.foldAllMarkerRegions",
        "when": "editorTextFocus && foldingEnabled"
    },
    {
        "key": "ctrl+k ctrl+1",
        "command": "-editor.foldLevel1",
        "when": "editorTextFocus && foldingEnabled"
    },
    {
        "key": "ctrl+k ctrl+2",
        "command": "-editor.foldLevel2",
        "when": "editorTextFocus && foldingEnabled"
    },
    {
        "key": "ctrl+k ctrl+3",
        "command": "-editor.foldLevel3",
        "when": "editorTextFocus && foldingEnabled"
    },
    {
        "key": "ctrl+k ctrl+4",
        "command": "-editor.foldLevel4",
        "when": "editorTextFocus && foldingEnabled"
    },
    {
        "key": "ctrl+k ctrl+5",
        "command": "-editor.foldLevel5",
        "when": "editorTextFocus && foldingEnabled"
    },
    {
        "key": "ctrl+k ctrl+6",
        "command": "-editor.foldLevel6",
        "when": "editorTextFocus && foldingEnabled"
    },
    {
        "key": "ctrl+k ctrl+7",
        "command": "-editor.foldLevel7",
        "when": "editorTextFocus && foldingEnabled"
    },
    {
        "key": "ctrl+k ctrl+[",
        "command": "-editor.foldRecursively",
        "when": "editorTextFocus && foldingEnabled"
    },
    {
        "key": "ctrl+k ctrl+.",
        "command": "-editor.removeManualFoldingRanges",
        "when": "editorTextFocus && foldingEnabled"
    },
    {
        "key": "ctrl+k ctrl+l",
        "command": "-editor.toggleFold",
        "when": "editorTextFocus && foldingEnabled"
    },
    {
        "key": "ctrl+k ctrl+j",
        "command": "-editor.unfoldAll",
        "when": "editorTextFocus && foldingEnabled"
    },
    {
        "key": "ctrl+k ctrl+=",
        "command": "-editor.unfoldAllExcept",
        "when": "editorTextFocus && foldingEnabled"
    },
    {
        "key": "ctrl+k ctrl+9",
        "command": "-editor.unfoldAllMarkerRegions",
        "when": "editorTextFocus && foldingEnabled"
    },
    {
        "key": "ctrl+k ctrl+]",
        "command": "-editor.unfoldRecursively",
        "when": "editorTextFocus && foldingEnabled"
    },
    {
        "key": "ctrl+k f2",
        "command": "-togglePeekWidgetFocus",
        "when": "inReferenceSearchEditor || referenceSearchVisible"
    },
    {
        "key": "ctrl+k ctrl+shift+c",
        "command": "-copyRelativeFilePath",
        "when": "editorFocus"
    },
    {
        "key": "ctrl+k ctrl+a",
        "command": "-keybindings.editor.addKeybinding",
        "when": "inKeybindings && keybindingFocus"
    },
    {
        "key": "ctrl+k ctrl+e",
        "command": "-keybindings.editor.defineWhenExpression",
        "when": "inKeybindings && keybindingFocus"
    },
    {
        "key": "ctrl+k ctrl+c",
        "command": "-notebook.cell.collapseCellInput",
        "when": "notebookCellListFocused && !inputFocus && !notebookCellInputIsCollapsed"
    },
    {
        "key": "ctrl+k t",
        "command": "-notebook.cell.collapseCellOutput",
        "when": "notebookCellHasOutputs && notebookCellListFocused && !inputFocus && !notebookCellOutputIsCollapsed"
    },
    {
        "key": "ctrl+k ctrl+c",
        "command": "-notebook.cell.expandCellInput",
        "when": "notebookCellInputIsCollapsed && notebookCellListFocused"
    },
    {
        "key": "ctrl+k t",
        "command": "-notebook.cell.expandCellOutput",
        "when": "notebookCellListFocused && notebookCellOutputIsCollapsed"
    },
    {
        "key": "ctrl+k ctrl+shift+\\",
        "command": "-notebook.cell.split",
        "when": "notebookCellEditable && notebookEditable && notebookEditorFocused"
    },
    {
        "key": "ctrl+k f",
        "command": "-workbench.action.closeFolder",
        "when": "emptyWorkspaceSupport && workbenchState != 'empty'"
    },
    {
        "key": "ctrl+k ctrl+o",
        "command": "-workbench.action.files.openFolder",
        "when": "openFolderWorkspaceSupport"
    },
    {
        "key": "ctrl+k ctrl+o",
        "command": "-workbench.action.files.openLocalFolder",
        "when": "remoteFileDialogVisible"
    },
    {
        "key": "ctrl+k o",
        "command": "-workbench.action.files.showOpenedFileInNewWindow",
        "when": "emptyWorkspaceSupport"
    },
    {
        "key": "ctrl+k ctrl+shift+\\",
        "command": "-workbench.action.joinEditorInGroup",
        "when": "sideBySideEditorActive"
    },
    {
        "key": "ctrl+k shift+enter",
        "command": "-workbench.action.pinEditor",
        "when": "!activeEditorIsPinned"
    },
    {
        "key": "ctrl+k ctrl+i",
        "command": "-workbench.action.showTreeHover",
        "when": "customTreeView && listFocus && !inputFocus"
    },
    {
        "key": "ctrl+k ctrl+shift+\\",
        "command": "-workbench.action.splitEditorInGroup",
        "when": "activeEditorCanSplitInGroup"
    },
    {
        "key": "ctrl+k shift+enter",
        "command": "-workbench.action.unpinEditor",
        "when": "activeEditorIsPinned"
    },
    {
        "key": "ctrl+k e",
        "command": "-workbench.files.action.focusOpenEditorsView",
        "when": "workbench.explorer.openEditorsView.active"
    },
    {
        "key": "ctrl+k down",
        "command": "-views.moveViewDown",
        "when": "focusedView != ''"
    },
    {
        "key": "ctrl+k left",
        "command": "-views.moveViewLeft",
        "when": "focusedView != ''"
    },
    {
        "key": "ctrl+k right",
        "command": "-views.moveViewRight",
        "when": "focusedView != ''"
    },
    {
        "key": "ctrl+k up",
        "command": "-views.moveViewUp",
        "when": "focusedView != ''"
    },
    {
        "key": "ctrl+k ctrl+alt+s",
        "command": "-git.stageSelectedRanges",
        "when": "isInDiffEditor"
    },
    {
        "key": "ctrl+k ctrl+n",
        "command": "-git.unstageSelectedRanges",
        "when": "isInDiffEditor"
    },
    {
        "key": "ctrl+k v",
        "command": "-markdown.showPreviewToSide",
        "when": "!notebookEditorFocused && editorLangId == 'markdown'"
    },
    {
        "key": "ctrl+k ctrl+r",
        "command": "-git.revertSelectedRanges",
        "when": "isInDiffEditor"
    },
    {
        "key": "ctrl+alt+u",
        "command": "undo"
    },
    {
        "key": "ctrl+a shift+e",
        "command": "workbench.files.action.focusOpenEditorsView"
    },
    {
        "key": "ctrl+a e",
        "command": "workbench.files.action.focusFilesExplorer"
    },
    {
        "key": "alt+a",
        "command": "editor.action.selectAll",
        "when": "!editorTextFocus || neovim.mode == 'insert'"
    },
    {
        "key": "ctrl+a",
        "command": "-editor.action.selectAll"
    },
    {
        "key": "ctrl+a",
        "command": "-vscode-neovim.send",
        "when": "editorTextFocus && neovim.ctrlKeysNormal && neovim.init && neovim.mode != 'insert'"
    },
    {
        "key": "ctrl+a",
        "command": "-vscode-neovim.send",
        "when": "editorTextFocus && neovim.ctrlKeysInsert && neovim.mode == 'insert'"
    },
    {
        "key": "alt+a",
        "command": "list.selectAll",
        "when": "listFocus && listSupportsMultiselect && !inputFocus"
    },
    {
        "key": "ctrl+a j",
        "command": "workbench.action.focusPanel"
    },
    {
        "key": "ctrl+l",
        "command": "workbench.action.focusAuxiliaryBar",
        "when": "activeEditorGroupLast && editorFocus"
    },
    {
        "key": "ctrl+h",
        "command": "workbench.action.focusSideBar",
        "when": "editorFocus && activeEditorGroupIndex == '1'"
    },
    {
        "key": "ctrl+a p",
        "command": "workbench.action.problems.focus"
    },
    {
        "key": "ctrl+a o",
        "command": "workbench.panel.output.focus"
    },
    {
        "key": "ctrl+a t",
        "command": "workbench.action.terminal.focus"
    },
    {
        "key": "ctrl+a k",
        "command": "workbench.action.focusActiveEditorGroup"
    },
    {
        "key": "ctrl+a b",
        "command": "bookmarksExplorer.focus"
    },
    {
        "key": "ctrl+a shift+h",
        "command": "workbench.action.toggleSidebarVisibility"
    },
    {
        "key": "ctrl+a shift+l",
        "command": "workbench.action.toggleAuxiliaryBar"
    },
    {
        "key": "ctrl+a shift+j",
        "command": "workbench.action.togglePanel"
    },
    {
        "key": "ctrl+a [",
        "command": "workbench.action.previousEditor"
    },
    {
        "key": "ctrl+a [",
        "command": "workbench.action.terminal.focusPrevious",
        "when": "terminalFocus && terminalHasBeenCreated && !terminalEditorFocus || terminalFocus && terminalProcessSupported && !terminalEditorFocus"
    },
    {
        "key": "ctrl+a ]",
        "command": "workbench.action.terminal.focusNext",
        "when": "terminalFocus && terminalHasBeenCreated && !terminalEditorFocus || terminalFocus && terminalProcessSupported && !terminalEditorFocus"
    },
    {
        "key": "ctrl+a shift+t",
        "command": "workbench.action.terminal.new",
        "when": "terminalProcessSupported || terminalWebExtensionContributedProfile"
    },
    {
        "key": "ctrl+shift+`",
        "command": "-workbench.action.terminal.new",
        "when": "terminalProcessSupported || terminalWebExtensionContributedProfile"
    },
    {
        "key": "ctrl+j",
        "command": "outline.focus",
        "when": "filesExplorerFocus"
    },
    {
        "key": "ctrl+a c",
        "command": "workbench.action.createTerminalEditor"
    },
    {
        "key": "ctrl+l",
        "command": "workbench.action.focusRightGroup",
        "when": "editorFocus && !activeEditorGroupLast"
    },
    {
        "key": "right",
        "command": "workbench.action.nextEditor",
        "when": "editorFocus && neovim.mode != 'insert'"
    },
    {
        "key": "ctrl+a g",
        "command": "workbench.scm.focus"
    },
    {
        "key": "ctrl+c",
        "command": "-vscode-neovim.escape",
        "when": "editorTextFocus && neovim.ctrlKeysNormal && neovim.init && !dirtyDiffVisible && !findWidgetVisible && !inReferenceSearchEditor && !markersNavigationVisible && !notebookCellFocused && !notificationCenterVisible && !parameterHintsVisible && !referenceSearchVisible && neovim.mode == 'normal'"
    },
    {
        "key": "ctrl+c",
        "command": "-vscode-neovim.escape",
        "when": "editorTextFocus && neovim.ctrlKeysInsert && neovim.init && neovim.mode != 'normal'"
    },
    {
        "key": "alt+o",
        "command": "workbench.action.files.openFile",
        "when": "true"
    },
    {
        "key": "ctrl+o",
        "command": "-workbench.action.files.openFile",
        "when": "true"
    },
    {
        "key": "shift+alt+o",
        "command": "workbench.action.files.openFolderViaWorkspace"
    },
    {
        "key": "ctrl+o",
        "command": "-workbench.action.files.openFolderViaWorkspace",
        "when": "!openFolderWorkspaceSupport && workbenchState == 'workspace'"
    }
]